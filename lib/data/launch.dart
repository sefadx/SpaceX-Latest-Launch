///
/// Code generated by jsonToDartModel https://ashamp.github.io/jsonToDartModel/
///
class LaunchCores {
/*
{
  "core": "5e9e289df35918033d3b2623",
  "flight": 1,
  "gridfins": false,
  "legs": false,
  "reused": false,
  "landing_attempt": false,
  "landing_success": null,
  "landing_type": null,
  "landpad": null
}
*/

  String? core;
  int? flight;
  bool? gridfins;
  bool? legs;
  bool? reused;
  bool? landingAttempt;
  String? landingSuccess;
  String? landingType;
  String? landpad;

  LaunchCores({
    this.core,
    this.flight,
    this.gridfins,
    this.legs,
    this.reused,
    this.landingAttempt,
    this.landingSuccess,
    this.landingType,
    this.landpad,
  });
  LaunchCores.fromJson(Map<String, dynamic> json) {
    core = json['core']?.toString();
    flight = int.tryParse(json['flight']?.toString() ?? '');
    gridfins = json['gridfins'];
    legs = json['legs'];
    reused = json['reused'];
    landingAttempt = json['landing_attempt'];
    landingSuccess = json['landing_success']?.toString();
    landingType = json['landing_type']?.toString();
    landpad = json['landpad']?.toString();
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['core'] = core;
    data['flight'] = flight;
    data['gridfins'] = gridfins;
    data['legs'] = legs;
    data['reused'] = reused;
    data['landing_attempt'] = landingAttempt;
    data['landing_success'] = landingSuccess;
    data['landing_type'] = landingType;
    data['landpad'] = landpad;
    return data;
  }
}

class LaunchFailures {
/*
{
  "time": 33,
  "altitude": null,
  "reason": "merlin engine failure"
}
*/

  int? time;
  String? altitude;
  String? reason;

  LaunchFailures({
    this.time,
    this.altitude,
    this.reason,
  });
  LaunchFailures.fromJson(Map<String, dynamic> json) {
    time = int.tryParse(json['time']?.toString() ?? '');
    altitude = json['altitude']?.toString();
    reason = json['reason']?.toString();
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['time'] = time;
    data['altitude'] = altitude;
    data['reason'] = reason;
    return data;
  }
}

class LaunchLinksReddit {
/*
{
  "campaign": null,
  "launch": null,
  "media": null,
  "recovery": null
}
*/

  String? campaign;
  String? launch;
  String? media;
  String? recovery;

  LaunchLinksReddit({
    this.campaign,
    this.launch,
    this.media,
    this.recovery,
  });
  LaunchLinksReddit.fromJson(Map<String, dynamic> json) {
    campaign = json['campaign']?.toString();
    launch = json['launch']?.toString();
    media = json['media']?.toString();
    recovery = json['recovery']?.toString();
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['campaign'] = campaign;
    data['launch'] = launch;
    data['media'] = media;
    data['recovery'] = recovery;
    return data;
  }
}

class LaunchLinksPatch {
/*
{
  "small": "https://images2.imgbox.com/94/f2/NN6Ph45r_o.png",
  "large": "https://images2.imgbox.com/5b/02/QcxHUb5V_o.png"
}
*/

  String? small;
  String? large;

  LaunchLinksPatch({
    this.small,
    this.large,
  });
  LaunchLinksPatch.fromJson(Map<String, dynamic> json) {
    small = json['small']?.toString();
    large = json['large']?.toString();
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['small'] = small;
    data['large'] = large;
    return data;
  }
}

class LaunchLinks {
/*
{
  "patch": {
    "small": "https://images2.imgbox.com/94/f2/NN6Ph45r_o.png",
    "large": "https://images2.imgbox.com/5b/02/QcxHUb5V_o.png"
  },
  "reddit": {
    "campaign": null,
    "launch": null,
    "media": null,
    "recovery": null
  },
  "flickr": {
    "small": [
      null
    ],
    "original": [
      null
    ]
  },
  "presskit": null,
  "webcast": "https://www.youtube.com/watch?v=0a_00nJ_Y88",
  "youtube_id": "0a_00nJ_Y88",
  "article": "https://www.space.com/2196-spacex-inaugural-falcon-1-rocket-lost-launch.html",
  "wikipedia": "https://en.wikipedia.org/wiki/DemoSat"
}
*/

  LaunchLinksPatch? patch;
  LaunchLinksReddit? reddit;
  String? presskit;
  String? webcast;
  String? youtubeId;
  String? article;
  String? wikipedia;

  LaunchLinks({
    this.patch,
    this.reddit,
    this.presskit,
    this.webcast,
    this.youtubeId,
    this.article,
    this.wikipedia,
  });
  LaunchLinks.fromJson(Map<String, dynamic> json) {
    patch = (json['patch'] != null && (json['patch'] is Map))
        ? LaunchLinksPatch.fromJson(json['patch'])
        : null;
    reddit = (json['reddit'] != null && (json['reddit'] is Map))
        ? LaunchLinksReddit.fromJson(json['reddit'])
        : null;
    presskit = json['presskit']?.toString();
    webcast = json['webcast']?.toString();
    youtubeId = json['youtube_id']?.toString();
    article = json['article']?.toString();
    wikipedia = json['wikipedia']?.toString();
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    if (patch != null) {
      data['patch'] = patch!.toJson();
    }
    if (reddit != null) {
      data['reddit'] = reddit!.toJson();
    }

    data['presskit'] = presskit;
    data['webcast'] = webcast;
    data['youtube_id'] = youtubeId;
    data['article'] = article;
    data['wikipedia'] = wikipedia;
    return data;
  }
}

class LaunchFairings {
/*
{
  "reused": false,
  "recovery_attempt": false,
  "recovered": false,
  "ships": [
    null
  ]
}
*/

  bool? reused;
  bool? recoveryAttempt;
  bool? recovered;

  LaunchFairings({
    this.reused,
    this.recoveryAttempt,
    this.recovered,
  });
  LaunchFairings.fromJson(Map<String, dynamic> json) {
    reused = json['reused'];
    recoveryAttempt = json['recovery_attempt'];
    recovered = json['recovered'];
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['reused'] = reused;
    data['recovery_attempt'] = recoveryAttempt;
    data['recovered'] = recovered;

    return data;
  }
}

class Launch {
/*
{
  "fairings": {
    "reused": false,
    "recovery_attempt": false,
    "recovered": false,
    "ships": [
      null
    ]
  },
  "links": {
    "patch": {
      "small": "https://images2.imgbox.com/94/f2/NN6Ph45r_o.png",
      "large": "https://images2.imgbox.com/5b/02/QcxHUb5V_o.png"
    },
    "reddit": {
      "campaign": null,
      "launch": null,
      "media": null,
      "recovery": null
    },
    "flickr": {
      "small": [
        null
      ],
      "original": [
        null
      ]
    },
    "presskit": null,
    "webcast": "https://www.youtube.com/watch?v=0a_00nJ_Y88",
    "youtube_id": "0a_00nJ_Y88",
    "article": "https://www.space.com/2196-spacex-inaugural-falcon-1-rocket-lost-launch.html",
    "wikipedia": "https://en.wikipedia.org/wiki/DemoSat"
  },
  "static_fire_date_utc": "2006-03-17T00:00:00.000Z",
  "static_fire_date_unix": 1142553600,
  "net": false,
  "window": 0,
  "rocket": "5e9d0d95eda69955f709d1eb",
  "success": false,
  "failures": [
    {
      "time": 33,
      "altitude": null,
      "reason": "merlin engine failure"
    }
  ],
  "details": "Engine failure at 33 seconds and loss of vehicle",
  "crew": [
    null
  ],
  "ships": [
    null
  ],
  "capsules": [
    null
  ],
  "payloads": [
    "5eb0e4b5b6c3bb0006eeb1e1"
  ],
  "launchpad": "5e9e4502f5090995de566f86",
  "flight_number": 1,
  "name": "FalconSat",
  "date_utc": "2006-03-24T22:30:00.000Z",
  "date_unix": 1143239400,
  "date_local": "2006-03-25T10:30:00+12:00",
  "date_precision": "hour",
  "upcoming": false,
  "cores": [
    {
      "core": "5e9e289df35918033d3b2623",
      "flight": 1,
      "gridfins": false,
      "legs": false,
      "reused": false,
      "landing_attempt": false,
      "landing_success": null,
      "landing_type": null,
      "landpad": null
    }
  ],
  "auto_update": true,
  "tbd": false,
  "launch_library_id": null,
  "id": "5eb87cd9ffd86e000604b32a"
}
*/

  LaunchFairings? fairings;
  LaunchLinks? links;
  String? staticFireDateUtc;
  int? staticFireDateUnix;
  bool? net;
  int? window;
  String? rocket;
  bool? success;
  List<LaunchFailures?>? failures;
  String? details;

  List<String?>? payloads;
  String? launchpad;
  int? flightNumber;
  String? name;
  String? dateUtc;
  int? dateUnix;
  String? dateLocal;
  String? datePrecision;
  bool? upcoming;
  List<LaunchCores?>? cores;
  bool? autoUpdate;
  bool? tbd;
  String? launchLibraryId;
  String? id;
  late DateTime date;
  Launch({
    this.fairings,
    this.links,
    this.staticFireDateUtc,
    this.staticFireDateUnix,
    this.net,
    this.window,
    this.rocket,
    this.success,
    this.failures,
    this.details,
    this.payloads,
    this.launchpad,
    this.flightNumber,
    this.name,
    this.dateUtc,
    this.dateUnix,
    this.dateLocal,
    this.datePrecision,
    this.upcoming,
    this.cores,
    this.autoUpdate,
    this.tbd,
    this.launchLibraryId,
    this.id,
  });
  Launch.fromJson(Map<String, dynamic> json) {
    date = DateTime.now();
    fairings = (json['fairings'] != null && (json['fairings'] is Map))
        ? LaunchFairings.fromJson(json['fairings'])
        : null;
    links = (json['links'] != null && (json['links'] is Map))
        ? LaunchLinks.fromJson(json['links'])
        : null;
    staticFireDateUtc = json['static_fire_date_utc']?.toString();
    staticFireDateUnix =
        int.tryParse(json['static_fire_date_unix']?.toString() ?? '');
    net = json['net'];
    window = int.tryParse(json['window']?.toString() ?? '');
    rocket = json['rocket']?.toString();
    success = json['success'];
    if (json['failures'] != null && (json['failures'] is List)) {
      final v = json['failures'];
      final arr0 = <LaunchFailures>[];
      v.forEach((v) {
        arr0.add(LaunchFailures.fromJson(v));
      });
      failures = arr0;
    }
    details = json['details']?.toString();

    if (json['payloads'] != null && (json['payloads'] is List)) {
      final v = json['payloads'];
      final arr0 = <String>[];
      v.forEach((v) {
        arr0.add(v.toString());
      });
      payloads = arr0;
    }
    launchpad = json['launchpad']?.toString();
    flightNumber = int.tryParse(json['flight_number']?.toString() ?? '');
    name = json['name']?.toString();
    dateUtc = json['date_utc']?.toString();
    dateUnix = int.tryParse(json['date_unix']?.toString() ?? '');
    dateLocal = json['date_local']?.toString();
    datePrecision = json['date_precision']?.toString();
    upcoming = json['upcoming'];
    if (json['cores'] != null && (json['cores'] is List)) {
      final v = json['cores'];
      final arr0 = <LaunchCores>[];
      v.forEach((v) {
        arr0.add(LaunchCores.fromJson(v));
      });
      cores = arr0;
    }
    autoUpdate = json['auto_update'];
    tbd = json['tbd'];
    launchLibraryId = json['launch_library_id']?.toString();
    id = json['id']?.toString();
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    if (fairings != null) {
      data['fairings'] = fairings!.toJson();
    }
    if (links != null) {
      data['links'] = links!.toJson();
    }
    data['static_fire_date_utc'] = staticFireDateUtc;
    data['static_fire_date_unix'] = staticFireDateUnix;
    data['net'] = net;
    data['window'] = window;
    data['rocket'] = rocket;
    data['success'] = success;
    if (failures != null) {
      final v = failures;
      final arr0 = [];
      v!.forEach((v) {
        arr0.add(v!.toJson());
      });
      data['failures'] = arr0;
    }
    data['details'] = details;

    if (payloads != null) {
      final v = payloads;
      final arr0 = [];
      v!.forEach((v) {
        arr0.add(v);
      });
      data['payloads'] = arr0;
    }
    data['launchpad'] = launchpad;
    data['flight_number'] = flightNumber;
    data['name'] = name;
    data['date_utc'] = dateUtc;
    data['date_unix'] = dateUnix;
    data['date_local'] = dateLocal;
    data['date_precision'] = datePrecision;
    data['upcoming'] = upcoming;
    if (cores != null) {
      final v = cores;
      final arr0 = [];
      v!.forEach((v) {
        arr0.add(v!.toJson());
      });
      data['cores'] = arr0;
    }
    data['auto_update'] = autoUpdate;
    data['tbd'] = tbd;
    data['launch_library_id'] = launchLibraryId;
    data['id'] = id;
    return data;
  }
}
